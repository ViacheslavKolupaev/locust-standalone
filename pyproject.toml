# ########################################################################################
#  Copyright 2022 Viacheslav Kolupaev; author's website address:
#
#      https://vkolupaev.com/?utm_source=c&utm_medium=link&utm_campaign=locust_standalone
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
# ########################################################################################

##########################################################################################
# Unified Python project settings file.
#
# First introduced in PEP 518 and later expanded in PEP 517, PEP 621 and PEP 660.
# This file contains build system requirements and information, which are used by pip
# to build the package.
##########################################################################################

[tool.poetry]
name = "locust-standalone"
version = "0.1.0"
description = ""
authors = ["Viacheslav Kolupaev <v.s.kolupaev@gmail.com>"]

[tool.poetry.dependencies]
python = "^3.10"
locust = "^2.10.1"
locust-plugins = "^2.6.8"
pydantic = { extras = ["dotenv"], version = "^1.9.1"}
typeguard = "^2.13.3"
orjson = "^3.7.7"

[tool.poetry.dev-dependencies]
pre-commit = "^2.20.0"
isort = "^5.10.1"
black = "^22.6.0"
mypy = "0.931"
wemake-python-styleguide = "^0.16.1"
nitpick = "^0.32.0"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.nitpick]
style = [
    "https://gitlab.com/vkolupaev/styleguide-config/-/raw/main/styles/nitpick-style.toml",
]

[tool.mypy]
warn_unused_ignores = true
plugins = ["pydantic.mypy"]
files = [
    "src/**/*.py",
    "tests/**/*.py",
]
exclude = [
    "^src\\/**\\/__init__\\.py$",
    "^alembic\\/env\\.py$",
]
python_version = "3.10"
follow_imports = "silent"
disable_error_code = "attr-defined"
verbosity = 0
show_error_codes = true
pretty = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_reexport = true
disallow_untyped_defs = true
warn_unused_configs = true
warn_return_any = true
warn_redundant_casts = true


[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[[tool.mypy.overrides]]
module = [
    "uvicorn",
    "fastapi",
    "typeguard",
    "src.*.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
norecursedirs = [
    ".*",
    "_darcs",
    "build",
    "CVS",
    "dist",
    "node_modules",
    "venv",
    "{arch}",
    "venv_py??",
    "venv_py???",
    "src",
    "app",
    "docs",
    "package_scripts",
    "pdoc",
    "requirements",
    "settings",
    "site",
    "_build",
    "__pycache__",
    "tmp*",
    "${env.WORKSPACE}",
]
filterwarnings = ["ignore::DeprecationWarning"]
addopts = [
    "-ra",
    "-l",
    "-vv",
    "--tb=short",
    "--strict",
    "--durations=3",
    "--cov=src/*",
    "--cov-report=term-missing",
    "--cov-report=xml:coverage.xml",
    "--junit-xml=report.xml",
    "--hypothesis-show-statistics",
]
timeout = 300
testpaths = ["tests"]
python_files = ["tests/**/test_*.py"]
required_plugins = [
    "pytest-cov",
    "pytest-timeout",
]
markers = [
    "smoke: marks a test as a smoke-test.",
    "fast: marks a test as a fast execution test.",
    "slow: marks a test as a slow execution test.",
    "db_dependent: marks a test as database dependent.",
    "network_dependent: marks a test as network dependent.",
    "requires_gpu: mark a test that requires a GPU to run.",
    "integration: marks a test that is meant to be used as integration testing.",
    "internal_data_sources: marks a test as a test of internal data sources.",
    "external_data_sources: marks a test as a test of external data sources.",
    "incremental: mark for abort incremental-marked tests in a class.",
]
log_cli = true
log_cli_level = "DEBUG"
log_cli_format = "%(asctime)s | %(levelname)s | %(name)s | %(funcName)s:%(lineno)d | %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
